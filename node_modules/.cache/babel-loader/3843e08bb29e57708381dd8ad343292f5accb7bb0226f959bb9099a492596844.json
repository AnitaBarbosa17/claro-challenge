{"ast":null,"code":"var _s = $RefreshSig$();\n// import {useMemo, useEffect, useState} from \"react\";\n// import { fetchAllChannels } from \"./helpers\";\n// import { useEpg } from \"planby\";\n// // Import theme\n// import { theme } from \"./helpers/theme\";\n// import { useDispatch, useSelector } from 'react-redux';\n\n// export function useApp() {\n\n// \tconst dispatch = useDispatch();\n\n// \tconst { list: channelsList } = useSelector(state => state.channels);\n// \tconst [epg, setEpg] = useState([]);\n// \tconst [channels, setChannels] = useState([]);\n// \tconst [isLoading, setIsLoading] = useState(false);\n\n// \tconst channelsData = useMemo(() => channels, [channels]);\n// \tconst epgData = useMemo(() => epg, [epg]);\n\n// \tconst handleGetEpg = () => {\n// \t\tlet epgList = [];\n// \t\tfor( let channel of channelsData ){\n// \t\t\tconst events = channel.events;\n// \t\t\tevents.forEach(event => {\n// \t\t\t\tepgList.push({\n// \t\t\t\t\t...event,\n// \t\t\t\t\tsince: new Date(event.date_begin).toISOString(),\n// \t\t\t\t\ttill: new Date(event.date_end).toISOString(),\n// \t\t\t\t\tid: event.id,\n// \t\t\t\t\ttitle: event.name,\n// \t\t\t\t\tdescription: event.description,\n// \t\t\t\t\tisYesterday: true,\n// \t\t\t\t\tchannelUuid: event.channel_id,\n// \t\t\t\t})\n// \t\t\t} )\n\n// \t\t}\n// \t\treturn epgList;\n// \t}\n\n// \tconst { getEpgProps, getLayoutProps } = useEpg({\n// \t\tchannels: channelsData,\n// \t\tepg: epgData,\n// \t\tdayWidth: 7200,\n// \t\tsidebarWidth: 100,\n// \t\titemHeight: 80,\n// \t\tisSidebar: true,\n// \t\tisTimeline: true,\n// \t\tisLine: true,\n// \t\tstartDate: \"2022-10-18T00:00:00\",\n// \t\tendDate: \"2022-10-18T24:00:00\",\n// \t\tisBaseTimeFormat: true,\n// \t\ttheme\n// \t});\n\n// \tuseEffect(() => {\n// \t\tsetEpg(handleGetEpg())\n// \t}, []);\n\n// \tuseEffect(() => {\n// \t\tconst getChannelsList = channelsList.map(channel => {\n// \t\t\treturn {\n// \t\t\t\t...channel,\n// \t\t\t\tuuid: channel.id\n// \t\t\t}\n// \t\t})\n// \t\tsetChannels(getChannelsList)\n// \t}, [channelsList]);\n\n// \tuseEffect(() => {\n// \t\tsetIsLoading(true)\n// \t\tdispatch(fetchAllChannels())\n// \t\tsetIsLoading(false)\n// \t}, [dispatch, isLoading]);\n\n// \treturn { getEpgProps, getLayoutProps, isLoading };\n// }\n\nimport React from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchChannels, fetchEpg, fetchAllChannels } from \"./helpers\";\nimport { useEpg } from \"planby\";\n\n// Import theme\nimport { theme } from \"./helpers/theme\";\nexport function useApp() {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    list: channelsList\n  } = useSelector(state => state.channels);\n  const [channels, setChannels] = React.useState([]);\n  const [epg, setEpg] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const date = new Date();\n  const startDate = date.getUTCFullYear() + \"/\" + (\"0\" + (date.getUTCMonth() + 1)).slice(-2) + \"/\" + (\"0\" + date.getUTCDate()).slice(-2);\n  const channelsData = React.useMemo(() => channels, [channels]);\n  const epgData = React.useMemo(() => epg, [epg]);\n  const {\n    getEpgProps,\n    getLayoutProps\n  } = useEpg({\n    channels: channelsData,\n    epg: epgData,\n    dayWidth: 7200,\n    sidebarWidth: 100,\n    itemHeight: 80,\n    isSidebar: true,\n    isTimeline: true,\n    isLine: true,\n    // startDate: \"2022-10-18T00:00:00\",\n    // endDate: \"2022-10-18T24:00:00\",\n    startDate: startDate,\n    // endDate: \"2023-01-109T24:00:00\",\n    isBaseTimeFormat: true,\n    theme\n  });\n  const handleFetchResources = React.useCallback(async () => {\n    setIsLoading(true);\n    const epg = await fetchEpg();\n    console.log(\"ðŸš€ ~ file: useApp.js:117 ~ handleFetchResources ~ epg\", epg);\n    const channels = await fetchChannels();\n    console.log(\"ðŸš€ ~ file: useApp.js:119 ~ handleFetchResources ~ channels\", channels);\n\n    // const transformChannels = (channels) => {\t\t\n    // \treturn channels.map(channel => {\n    // \t\treturn {\n    // \t\t\tuuid: channel.id,\n    // \t\t\ttitle: channel.name,\n    // \t\t\tlogo: channel.image,\n    // \t\t\tyear: 2002\n    // \t\t}\n    // \t});\n\n    // }\n    // const handleGetEpg = () => {\n    // \tlet epgList = [];\n    // \tfor( let channel of channelsList ){\n    // \t\tconst events = channel.events;\n    // \t\tevents.forEach(event => {\n    // \t\t\tconst since = new Date(event.date_begin).toISOString()\n    // \t\t\tconst till = new Date(event.date_end).toISOString()\n    // \t\t\tepgList.push({\n    // \t\t\t\tchannelUuid: event.channel_id,\n    // \t\t\t\tid: event.id,\n    // \t\t\t\timage: \"https://www.themoviedb.org/t/p/w1066_and_h600_bestv2/sjx6zjQI2dLGtEL0HGWsnq6UyLU.jpg\",\n    // \t\t\t\tsince: event.date_begin,\n    // \t\t\t\ttill: event.date_end,\n    // \t\t\t\ttitle: event.name,\n    // \t\t\t\tdescription: event.description,\n    // \t\t\t})\n    // \t\t})\n\n    // \t}\n    // \treturn epgList;\n    // }\n\n    // console.log(\"ðŸš€ ~ file: useApp.js:121 ~ handleFetchResources ~ canales\", transformChannels(channelsList))\n    // console.log(\"ðŸš€ ~ file: useApp.js:121 ~ handleFetchResources ~ handleGetEpg\", handleGetEpg(channelsList))\n\n    setChannels(channels);\n    setEpg(epg);\n    // setEpg(handleGetEpg(channelsList));\n    // setChannels(transformChannels(channelsList));\n    setIsLoading(false);\n  }, [channelsList]);\n  React.useEffect(() => {\n    handleFetchResources();\n  }, [handleFetchResources]);\n  React.useEffect(() => {\n    dispatch(fetchAllChannels());\n  }, [dispatch]);\n  return {\n    getEpgProps,\n    getLayoutProps,\n    isLoading\n  };\n}\n_s(useApp, \"JfeeD0nLL7/vNV3n/mZD40Mlo28=\", false, function () {\n  return [useDispatch, useSelector, useEpg];\n});","map":{"version":3,"names":["React","useDispatch","useSelector","fetchChannels","fetchEpg","fetchAllChannels","useEpg","theme","useApp","dispatch","list","channelsList","state","channels","setChannels","useState","epg","setEpg","isLoading","setIsLoading","date","Date","startDate","getUTCFullYear","getUTCMonth","slice","getUTCDate","channelsData","useMemo","epgData","getEpgProps","getLayoutProps","dayWidth","sidebarWidth","itemHeight","isSidebar","isTimeline","isLine","isBaseTimeFormat","handleFetchResources","useCallback","console","log","useEffect"],"sources":["/Users/anabarbosa/Code/Tests/react-redux-monkey/src/useApp.js"],"sourcesContent":["// import {useMemo, useEffect, useState} from \"react\";\n// import { fetchAllChannels } from \"./helpers\";\n// import { useEpg } from \"planby\";\n// // Import theme\n// import { theme } from \"./helpers/theme\";\n// import { useDispatch, useSelector } from 'react-redux';\n\n// export function useApp() {\n\t\n// \tconst dispatch = useDispatch();\n\n// \tconst { list: channelsList } = useSelector(state => state.channels);\n// \tconst [epg, setEpg] = useState([]);\n// \tconst [channels, setChannels] = useState([]);\n// \tconst [isLoading, setIsLoading] = useState(false);\n\t\n// \tconst channelsData = useMemo(() => channels, [channels]);\n// \tconst epgData = useMemo(() => epg, [epg]);\n\n// \tconst handleGetEpg = () => {\n// \t\tlet epgList = [];\n// \t\tfor( let channel of channelsData ){\n// \t\t\tconst events = channel.events;\n// \t\t\tevents.forEach(event => {\n// \t\t\t\tepgList.push({\n// \t\t\t\t\t...event,\n// \t\t\t\t\tsince: new Date(event.date_begin).toISOString(),\n// \t\t\t\t\ttill: new Date(event.date_end).toISOString(),\n// \t\t\t\t\tid: event.id,\n// \t\t\t\t\ttitle: event.name,\n// \t\t\t\t\tdescription: event.description,\n// \t\t\t\t\tisYesterday: true,\n// \t\t\t\t\tchannelUuid: event.channel_id,\n// \t\t\t\t})\n// \t\t\t} )\n\t\t\t\n// \t\t}\n// \t\treturn epgList;\n// \t}\n\n// \tconst { getEpgProps, getLayoutProps } = useEpg({\n// \t\tchannels: channelsData,\n// \t\tepg: epgData,\n// \t\tdayWidth: 7200,\n// \t\tsidebarWidth: 100,\n// \t\titemHeight: 80,\n// \t\tisSidebar: true,\n// \t\tisTimeline: true,\n// \t\tisLine: true,\n// \t\tstartDate: \"2022-10-18T00:00:00\",\n// \t\tendDate: \"2022-10-18T24:00:00\",\n// \t\tisBaseTimeFormat: true,\n// \t\ttheme\n// \t});\n\n// \tuseEffect(() => {\n// \t\tsetEpg(handleGetEpg())\n// \t}, []);\n\t\n// \tuseEffect(() => {\n// \t\tconst getChannelsList = channelsList.map(channel => {\n// \t\t\treturn {\n// \t\t\t\t...channel,\n// \t\t\t\tuuid: channel.id\n// \t\t\t}\n// \t\t})\n// \t\tsetChannels(getChannelsList)\n// \t}, [channelsList]);\n\t\n// \tuseEffect(() => {\n// \t\tsetIsLoading(true)\n// \t\tdispatch(fetchAllChannels())\n// \t\tsetIsLoading(false)\n// \t}, [dispatch, isLoading]);\n\n// \treturn { getEpgProps, getLayoutProps, isLoading };\n// }\n\n\nimport React from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchChannels, fetchEpg, fetchAllChannels } from \"./helpers\";\n\nimport { useEpg } from \"planby\";\n\n// Import theme\nimport { theme } from \"./helpers/theme\";\n\nexport function useApp() {\n\tconst dispatch = useDispatch();\n\tconst { list: channelsList } = useSelector(state => state.channels);\n\tconst [channels, setChannels] = React.useState([]);\n\tconst [epg, setEpg] = React.useState([]);\n\tconst [isLoading, setIsLoading] = React.useState(false);\n\n\tconst date = new Date()\n\tconst startDate = date.getUTCFullYear() + \"/\" +\n    (\"0\" + (date.getUTCMonth()+1)).slice(-2) + \"/\" +\n    (\"0\" + date.getUTCDate()).slice(-2);\n\n\tconst channelsData = React.useMemo(() => channels, [channels]);\n\tconst epgData = React.useMemo(() => epg, [epg]);\n\n\tconst { getEpgProps, getLayoutProps } = useEpg({\n\t\tchannels: channelsData,\n\t\tepg: epgData,\n\t\tdayWidth: 7200,\n\t\tsidebarWidth: 100,\n\t\titemHeight: 80,\n\t\tisSidebar: true,\n\t\tisTimeline: true,\n\t\tisLine: true,\n\t\t// startDate: \"2022-10-18T00:00:00\",\n    \t// endDate: \"2022-10-18T24:00:00\",\n\t\tstartDate: startDate,\n\t\t// endDate: \"2023-01-109T24:00:00\",\n\t\tisBaseTimeFormat: true,\n\t\ttheme\n\t});\n\n  const handleFetchResources = React.useCallback(async () => {\n    setIsLoading(true);\n    const epg = await fetchEpg();\n    console.log(\"ðŸš€ ~ file: useApp.js:117 ~ handleFetchResources ~ epg\", epg)\n    const channels = await fetchChannels();\n    console.log(\"ðŸš€ ~ file: useApp.js:119 ~ handleFetchResources ~ channels\", channels)\n\n\t// const transformChannels = (channels) => {\t\t\n\t// \treturn channels.map(channel => {\n\t// \t\treturn {\n\t// \t\t\tuuid: channel.id,\n\t// \t\t\ttitle: channel.name,\n\t// \t\t\tlogo: channel.image,\n\t// \t\t\tyear: 2002\n\t// \t\t}\n\t// \t});\n\t\t\n\t// }\n\t// const handleGetEpg = () => {\n\t// \tlet epgList = [];\n\t// \tfor( let channel of channelsList ){\n\t// \t\tconst events = channel.events;\n\t// \t\tevents.forEach(event => {\n\t// \t\t\tconst since = new Date(event.date_begin).toISOString()\n\t// \t\t\tconst till = new Date(event.date_end).toISOString()\n\t// \t\t\tepgList.push({\n\t// \t\t\t\tchannelUuid: event.channel_id,\n\t// \t\t\t\tid: event.id,\n\t// \t\t\t\timage: \"https://www.themoviedb.org/t/p/w1066_and_h600_bestv2/sjx6zjQI2dLGtEL0HGWsnq6UyLU.jpg\",\n\t// \t\t\t\tsince: event.date_begin,\n\t// \t\t\t\ttill: event.date_end,\n\t// \t\t\t\ttitle: event.name,\n\t// \t\t\t\tdescription: event.description,\n\t// \t\t\t})\n\t// \t\t})\n\t\t\t\n\t// \t}\n\t// \treturn epgList;\n\t// }\n\n\t// console.log(\"ðŸš€ ~ file: useApp.js:121 ~ handleFetchResources ~ canales\", transformChannels(channelsList))\n\t// console.log(\"ðŸš€ ~ file: useApp.js:121 ~ handleFetchResources ~ handleGetEpg\", handleGetEpg(channelsList))\n\n    setChannels(channels);\n    setEpg(epg);\n    // setEpg(handleGetEpg(channelsList));\n\t// setChannels(transformChannels(channelsList));\n    setIsLoading(false);\n  }, [channelsList]);\n\n\tReact.useEffect(() => {\n\t\thandleFetchResources();\n\t}, [handleFetchResources]);\n\n\tReact.useEffect(() => {\n\t\tdispatch(fetchAllChannels())\n\t}, [dispatch]);\n\n  return { getEpgProps, getLayoutProps, isLoading };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}