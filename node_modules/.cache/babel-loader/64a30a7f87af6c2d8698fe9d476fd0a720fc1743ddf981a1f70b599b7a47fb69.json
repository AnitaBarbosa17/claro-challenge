{"ast":null,"code":"var _s = $RefreshSig$();\n// import {useMemo, useEffect, useState} from \"react\";\n// import { fetchAllChannels } from \"./helpers\";\n// import { useEpg } from \"planby\";\n// // Import theme\n// import { theme } from \"./helpers/theme\";\n// import { useDispatch, useSelector } from 'react-redux';\n\n// export function useApp() {\n\n// \tconst dispatch = useDispatch();\n\n// \tconst { list: channelsList } = useSelector(state => state.channels);\n// \tconst [epg, setEpg] = useState([]);\n// \tconst [channels, setChannels] = useState([]);\n// \tconst [isLoading, setIsLoading] = useState(false);\n\n// \tconst channelsData = useMemo(() => channels, [channels]);\n// \tconst epgData = useMemo(() => epg, [epg]);\n\n// \tconst handleGetEpg = () => {\n// \t\tlet epgList = [];\n// \t\tfor( let channel of channelsData ){\n// \t\t\tconst events = channel.events;\n// \t\t\tevents.forEach(event => {\n// \t\t\t\tepgList.push({\n// \t\t\t\t\t...event,\n// \t\t\t\t\tsince: new Date(event.date_begin).toISOString(),\n// \t\t\t\t\ttill: new Date(event.date_end).toISOString(),\n// \t\t\t\t\tid: event.id,\n// \t\t\t\t\ttitle: event.name,\n// \t\t\t\t\tdescription: event.description,\n// \t\t\t\t\tisYesterday: true,\n// \t\t\t\t\tchannelUuid: event.channel_id,\n// \t\t\t\t})\n// \t\t\t} )\n\n// \t\t}\n// \t\treturn epgList;\n// \t}\n\n// \tconst { getEpgProps, getLayoutProps } = useEpg({\n// \t\tchannels: channelsData,\n// \t\tepg: epgData,\n// \t\tdayWidth: 7200,\n// \t\tsidebarWidth: 100,\n// \t\titemHeight: 80,\n// \t\tisSidebar: true,\n// \t\tisTimeline: true,\n// \t\tisLine: true,\n// \t\tstartDate: \"2022-10-18T00:00:00\",\n// \t\tendDate: \"2022-10-18T24:00:00\",\n// \t\tisBaseTimeFormat: true,\n// \t\ttheme\n// \t});\n\n// \tuseEffect(() => {\n// \t\tsetEpg(handleGetEpg())\n// \t}, []);\n\n// \tuseEffect(() => {\n// \t\tconst getChannelsList = channelsList.map(channel => {\n// \t\t\treturn {\n// \t\t\t\t...channel,\n// \t\t\t\tuuid: channel.id\n// \t\t\t}\n// \t\t})\n// \t\tsetChannels(getChannelsList)\n// \t}, [channelsList]);\n\n// \tuseEffect(() => {\n// \t\tsetIsLoading(true)\n// \t\tdispatch(fetchAllChannels())\n// \t\tsetIsLoading(false)\n// \t}, [dispatch, isLoading]);\n\n// \treturn { getEpgProps, getLayoutProps, isLoading };\n// }\n\nimport React from \"react\";\nimport { fetchChannels, fetchEpg } from \"./helpers\";\nimport { useEpg } from \"planby\";\n\n// Import theme\nimport { theme } from \"./helpers/theme\";\nexport function useApp() {\n  _s();\n  const [channels, setChannels] = React.useState([]);\n  const [epg, setEpg] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(false);\n  const channelsData = React.useMemo(() => channels, [channels]);\n  const epgData = React.useMemo(() => epg, [epg]);\n  const {\n    getEpgProps,\n    getLayoutProps\n  } = useEpg({\n    channels: channelsData,\n    epg: epgData,\n    dayWidth: 7200,\n    sidebarWidth: 100,\n    itemHeight: 80,\n    isSidebar: true,\n    isTimeline: true,\n    isLine: true,\n    startDate: \"2022-10-18T00:00:00\",\n    endDate: \"2022-10-18T24:00:00\",\n    isBaseTimeFormat: true,\n    theme\n  });\n  const handleFetchResources = React.useCallback(async () => {\n    setIsLoading(true);\n    const epg = await fetchEpg();\n    const channels = await fetchChannels();\n    setEpg(epg);\n    setChannels(channels);\n    setIsLoading(false);\n  }, []);\n  React.useEffect(() => {\n    handleFetchResources();\n  }, [handleFetchResources]);\n  return {\n    getEpgProps,\n    getLayoutProps,\n    isLoading\n  };\n}\n_s(useApp, \"An+QXE49wP38MifbrCDPDFpa/mA=\", false, function () {\n  return [useEpg];\n});","map":{"version":3,"names":["React","fetchChannels","fetchEpg","useEpg","theme","useApp","channels","setChannels","useState","epg","setEpg","isLoading","setIsLoading","channelsData","useMemo","epgData","getEpgProps","getLayoutProps","dayWidth","sidebarWidth","itemHeight","isSidebar","isTimeline","isLine","startDate","endDate","isBaseTimeFormat","handleFetchResources","useCallback","useEffect"],"sources":["/Users/anabarbosa/Code/Tests/react-redux-monkey/src/useApp.js"],"sourcesContent":["// import {useMemo, useEffect, useState} from \"react\";\n// import { fetchAllChannels } from \"./helpers\";\n// import { useEpg } from \"planby\";\n// // Import theme\n// import { theme } from \"./helpers/theme\";\n// import { useDispatch, useSelector } from 'react-redux';\n\n// export function useApp() {\n\t\n// \tconst dispatch = useDispatch();\n\n// \tconst { list: channelsList } = useSelector(state => state.channels);\n// \tconst [epg, setEpg] = useState([]);\n// \tconst [channels, setChannels] = useState([]);\n// \tconst [isLoading, setIsLoading] = useState(false);\n\t\n// \tconst channelsData = useMemo(() => channels, [channels]);\n// \tconst epgData = useMemo(() => epg, [epg]);\n\n// \tconst handleGetEpg = () => {\n// \t\tlet epgList = [];\n// \t\tfor( let channel of channelsData ){\n// \t\t\tconst events = channel.events;\n// \t\t\tevents.forEach(event => {\n// \t\t\t\tepgList.push({\n// \t\t\t\t\t...event,\n// \t\t\t\t\tsince: new Date(event.date_begin).toISOString(),\n// \t\t\t\t\ttill: new Date(event.date_end).toISOString(),\n// \t\t\t\t\tid: event.id,\n// \t\t\t\t\ttitle: event.name,\n// \t\t\t\t\tdescription: event.description,\n// \t\t\t\t\tisYesterday: true,\n// \t\t\t\t\tchannelUuid: event.channel_id,\n// \t\t\t\t})\n// \t\t\t} )\n\t\t\t\n// \t\t}\n// \t\treturn epgList;\n// \t}\n\n// \tconst { getEpgProps, getLayoutProps } = useEpg({\n// \t\tchannels: channelsData,\n// \t\tepg: epgData,\n// \t\tdayWidth: 7200,\n// \t\tsidebarWidth: 100,\n// \t\titemHeight: 80,\n// \t\tisSidebar: true,\n// \t\tisTimeline: true,\n// \t\tisLine: true,\n// \t\tstartDate: \"2022-10-18T00:00:00\",\n// \t\tendDate: \"2022-10-18T24:00:00\",\n// \t\tisBaseTimeFormat: true,\n// \t\ttheme\n// \t});\n\n// \tuseEffect(() => {\n// \t\tsetEpg(handleGetEpg())\n// \t}, []);\n\t\n// \tuseEffect(() => {\n// \t\tconst getChannelsList = channelsList.map(channel => {\n// \t\t\treturn {\n// \t\t\t\t...channel,\n// \t\t\t\tuuid: channel.id\n// \t\t\t}\n// \t\t})\n// \t\tsetChannels(getChannelsList)\n// \t}, [channelsList]);\n\t\n// \tuseEffect(() => {\n// \t\tsetIsLoading(true)\n// \t\tdispatch(fetchAllChannels())\n// \t\tsetIsLoading(false)\n// \t}, [dispatch, isLoading]);\n\n// \treturn { getEpgProps, getLayoutProps, isLoading };\n// }\n\n\nimport React from \"react\";\n\nimport { fetchChannels, fetchEpg } from \"./helpers\";\n\nimport { useEpg } from \"planby\";\n\n// Import theme\nimport { theme } from \"./helpers/theme\";\n\nexport function useApp() {\n  const [channels, setChannels] = React.useState([]);\n  const [epg, setEpg] = React.useState([]);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  const channelsData = React.useMemo(() => channels, [channels]);\n  const epgData = React.useMemo(() => epg, [epg]);\n\n  const { getEpgProps, getLayoutProps } = useEpg({\n    channels: channelsData,\n    epg: epgData,\n    dayWidth: 7200,\n    sidebarWidth: 100,\n    itemHeight: 80,\n    isSidebar: true,\n    isTimeline: true,\n    isLine: true,\n    startDate: \"2022-10-18T00:00:00\",\n    endDate: \"2022-10-18T24:00:00\",\n    isBaseTimeFormat: true,\n    theme\n  });\n\n  const handleFetchResources = React.useCallback(async () => {\n    setIsLoading(true);\n    const epg = await fetchEpg();\n    const channels = await fetchChannels();\n    setEpg(epg);\n    setChannels(channels);\n    setIsLoading(false);\n  }, []);\n\n  React.useEffect(() => {\n    handleFetchResources();\n  }, [handleFetchResources]);\n\n  return { getEpgProps, getLayoutProps, isLoading };\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,aAAa,EAAEC,QAAQ,QAAQ,WAAW;AAEnD,SAASC,MAAM,QAAQ,QAAQ;;AAE/B;AACA,SAASC,KAAK,QAAQ,iBAAiB;AAEvC,OAAO,SAASC,MAAM,GAAG;EAAA;EACvB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,KAAK,CAACQ,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGV,KAAK,CAACQ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGZ,KAAK,CAACQ,QAAQ,CAAC,KAAK,CAAC;EAEvD,MAAMK,YAAY,GAAGb,KAAK,CAACc,OAAO,CAAC,MAAMR,QAAQ,EAAE,CAACA,QAAQ,CAAC,CAAC;EAC9D,MAAMS,OAAO,GAAGf,KAAK,CAACc,OAAO,CAAC,MAAML,GAAG,EAAE,CAACA,GAAG,CAAC,CAAC;EAE/C,MAAM;IAAEO,WAAW;IAAEC;EAAe,CAAC,GAAGd,MAAM,CAAC;IAC7CG,QAAQ,EAAEO,YAAY;IACtBJ,GAAG,EAAEM,OAAO;IACZG,QAAQ,EAAE,IAAI;IACdC,YAAY,EAAE,GAAG;IACjBC,UAAU,EAAE,EAAE;IACdC,SAAS,EAAE,IAAI;IACfC,UAAU,EAAE,IAAI;IAChBC,MAAM,EAAE,IAAI;IACZC,SAAS,EAAE,qBAAqB;IAChCC,OAAO,EAAE,qBAAqB;IAC9BC,gBAAgB,EAAE,IAAI;IACtBtB;EACF,CAAC,CAAC;EAEF,MAAMuB,oBAAoB,GAAG3B,KAAK,CAAC4B,WAAW,CAAC,YAAY;IACzDhB,YAAY,CAAC,IAAI,CAAC;IAClB,MAAMH,GAAG,GAAG,MAAMP,QAAQ,EAAE;IAC5B,MAAMI,QAAQ,GAAG,MAAML,aAAa,EAAE;IACtCS,MAAM,CAACD,GAAG,CAAC;IACXF,WAAW,CAACD,QAAQ,CAAC;IACrBM,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAENZ,KAAK,CAAC6B,SAAS,CAAC,MAAM;IACpBF,oBAAoB,EAAE;EACxB,CAAC,EAAE,CAACA,oBAAoB,CAAC,CAAC;EAE1B,OAAO;IAAEX,WAAW;IAAEC,cAAc;IAAEN;EAAU,CAAC;AACnD;AAAC,GArCeN,MAAM;EAAA,QAQoBF,MAAM;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}