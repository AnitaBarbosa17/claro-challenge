{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useMemo, useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchAllChannels, toISOStringWithTimezone, roundMinutes } from \"./helpers\";\nimport { useEpg } from \"planby\";\n\n// Import theme\nimport { theme } from \"./helpers/theme\";\nexport function useApp() {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    list: channelsList\n  } = useSelector(state => state.channels);\n  const {\n    list: epgList\n  } = useSelector(state => state.epg);\n  const [channels, setChannels] = useState([]);\n  const [epg, setEpg] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const date = new Date();\n  const startDate = roundMinutes(date);\n  const channelsData = useMemo(() => channels, [channels]);\n  const epgData = useMemo(() => epg, [epg]);\n  const {\n    getEpgProps,\n    getLayoutProps\n  } = useEpg({\n    channels: channelsData,\n    epg: epgData,\n    dayWidth: 7200,\n    sidebarWidth: 100,\n    itemHeight: 80,\n    isSidebar: true,\n    isTimeline: true,\n    isLine: true,\n    startDate: startDate,\n    // endDate: \"2023-01-10T22:00:00\",\n    isBaseTimeFormat: true,\n    theme\n  });\n  const handleFetchResources = useCallback(async () => {\n    setChannels(channelsList);\n    setEpg(epgList);\n  }, [channelsList, epgList]);\n  useEffect(() => {\n    dispatch(fetchAllChannels());\n  }, [dispatch]);\n  useEffect(() => {\n    if (!channelsList.length && !epgList.length) {\n      setIsLoading(true);\n    } else {\n      setIsLoading(false);\n      handleFetchResources();\n    }\n  }, [handleFetchResources, channelsList, epgList]);\n  return {\n    getEpgProps,\n    getLayoutProps,\n    isLoading\n  };\n}\n_s(useApp, \"+Yomw6WUbuHXwEbdub5LZZ2bQBA=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useEpg];\n});","map":{"version":3,"names":["useState","useMemo","useCallback","useEffect","useDispatch","useSelector","fetchAllChannels","toISOStringWithTimezone","roundMinutes","useEpg","theme","useApp","dispatch","list","channelsList","state","channels","epgList","epg","setChannels","setEpg","isLoading","setIsLoading","date","Date","startDate","channelsData","epgData","getEpgProps","getLayoutProps","dayWidth","sidebarWidth","itemHeight","isSidebar","isTimeline","isLine","isBaseTimeFormat","handleFetchResources","length"],"sources":["/Users/anabarbosa/Code/Tests/react-redux-monkey/src/useApp.js"],"sourcesContent":["import { useState, useMemo, useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchAllChannels, toISOStringWithTimezone, roundMinutes } from \"./helpers\";\nimport { useEpg } from \"planby\";\n\n// Import theme\nimport { theme } from \"./helpers/theme\";\n\nexport function useApp() {\n\tconst dispatch = useDispatch();\n\tconst { list: channelsList } = useSelector(state => state.channels);\n\tconst { list: epgList } = useSelector(state => state.epg);\n\tconst [channels, setChannels] = useState([]);\n\tconst [epg, setEpg] = useState([]);\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst date = new Date()\n\tconst startDate = roundMinutes(date);\t\n\n\tconst channelsData = useMemo(() => channels, [channels]);\n\tconst epgData = useMemo(() => epg, [epg]);\n\n\tconst { getEpgProps, getLayoutProps } = useEpg({\n\t\tchannels: channelsData,\n\t\tepg: epgData,\n\t\tdayWidth: 7200,\n\t\tsidebarWidth: 100,\n\t\titemHeight: 80,\n\t\tisSidebar: true,\n\t\tisTimeline: true,\n\t\tisLine: true,\n\t\tstartDate: startDate,\n\t\t// endDate: \"2023-01-10T22:00:00\",\n\t\tisBaseTimeFormat: true,\n\t\ttheme\n\t});\n\n\tconst handleFetchResources = useCallback(async () => {\n\t\tsetChannels(channelsList);\n\t\tsetEpg(epgList);\n\t}, [channelsList, epgList]);\n\n\tuseEffect(() => {\n\t\tdispatch(fetchAllChannels())\n\t}, [dispatch]);\n\n\tuseEffect(() => {\n\t\tif(!channelsList.length && !epgList.length) {\n\t\t\tsetIsLoading(true);\n\t\t} else {\n\t\t\tsetIsLoading(false);\n\t\t\thandleFetchResources()\n\t\t}\n\t}, [handleFetchResources, channelsList, epgList]);\n\n\treturn { getEpgProps, getLayoutProps, isLoading };\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,OAAO,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AACjE,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,gBAAgB,EAAEC,uBAAuB,EAAEC,YAAY,QAAQ,WAAW;AACnF,SAASC,MAAM,QAAQ,QAAQ;;AAE/B;AACA,SAASC,KAAK,QAAQ,iBAAiB;AAEvC,OAAO,SAASC,MAAM,GAAG;EAAA;EACxB,MAAMC,QAAQ,GAAGR,WAAW,EAAE;EAC9B,MAAM;IAAES,IAAI,EAAEC;EAAa,CAAC,GAAGT,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACC,QAAQ,CAAC;EACnE,MAAM;IAAEH,IAAI,EAAEI;EAAQ,CAAC,GAAGZ,WAAW,CAACU,KAAK,IAAIA,KAAK,CAACG,GAAG,CAAC;EACzD,MAAM,CAACF,QAAQ,EAAEG,WAAW,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkB,GAAG,EAAEE,MAAM,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAACqB,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMuB,IAAI,GAAG,IAAIC,IAAI,EAAE;EACvB,MAAMC,SAAS,GAAGjB,YAAY,CAACe,IAAI,CAAC;EAEpC,MAAMG,YAAY,GAAGzB,OAAO,CAAC,MAAMe,QAAQ,EAAE,CAACA,QAAQ,CAAC,CAAC;EACxD,MAAMW,OAAO,GAAG1B,OAAO,CAAC,MAAMiB,GAAG,EAAE,CAACA,GAAG,CAAC,CAAC;EAEzC,MAAM;IAAEU,WAAW;IAAEC;EAAe,CAAC,GAAGpB,MAAM,CAAC;IAC9CO,QAAQ,EAAEU,YAAY;IACtBR,GAAG,EAAES,OAAO;IACZG,QAAQ,EAAE,IAAI;IACdC,YAAY,EAAE,GAAG;IACjBC,UAAU,EAAE,EAAE;IACdC,SAAS,EAAE,IAAI;IACfC,UAAU,EAAE,IAAI;IAChBC,MAAM,EAAE,IAAI;IACZV,SAAS,EAAEA,SAAS;IACpB;IACAW,gBAAgB,EAAE,IAAI;IACtB1B;EACD,CAAC,CAAC;EAEF,MAAM2B,oBAAoB,GAAGnC,WAAW,CAAC,YAAY;IACpDiB,WAAW,CAACL,YAAY,CAAC;IACzBM,MAAM,CAACH,OAAO,CAAC;EAChB,CAAC,EAAE,CAACH,YAAY,EAAEG,OAAO,CAAC,CAAC;EAE3Bd,SAAS,CAAC,MAAM;IACfS,QAAQ,CAACN,gBAAgB,EAAE,CAAC;EAC7B,CAAC,EAAE,CAACM,QAAQ,CAAC,CAAC;EAEdT,SAAS,CAAC,MAAM;IACf,IAAG,CAACW,YAAY,CAACwB,MAAM,IAAI,CAACrB,OAAO,CAACqB,MAAM,EAAE;MAC3ChB,YAAY,CAAC,IAAI,CAAC;IACnB,CAAC,MAAM;MACNA,YAAY,CAAC,KAAK,CAAC;MACnBe,oBAAoB,EAAE;IACvB;EACD,CAAC,EAAE,CAACA,oBAAoB,EAAEvB,YAAY,EAAEG,OAAO,CAAC,CAAC;EAEjD,OAAO;IAAEW,WAAW;IAAEC,cAAc;IAAER;EAAU,CAAC;AAClD;AAAC,GAhDeV,MAAM;EAAA,QACJP,WAAW,EACGC,WAAW,EAChBA,WAAW,EAWGI,MAAM;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}