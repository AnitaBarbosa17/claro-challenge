{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useMemo, useCallback, useEffect } from \"react\";\n// import { useDispatch, useSelector } from 'react-redux';\nimport { fetchAllChannels, transformChannels, transformEgp, roundMinutes, isEmpty } from \"./helpers\";\nimport { useEpg } from \"planby\";\nimport { theme } from \"./helpers/theme\";\nconst globalStyles = `\n\t.planby {\n\t\tfont-family: \"Poppins\" sans-serif;\n\t}\n`;\nexport function useApp() {\n  _s();\n  // const dispatch = useDispatch();\n\n  // const { list: channelsList } = useSelector(state => state.channels);\n  // const { list: epgList } = useSelector(state => state.epg);\n\n  const [channelsList, setChannelsList] = useState([]);\n  const [channels, setChannels] = useState([]);\n  const [epg, setEpg] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const date = new Date();\n  const startDate = roundMinutes(date);\n  const channelsData = useMemo(() => channels, [channels]);\n  const epgData = useMemo(() => epg, [epg]);\n  const {\n    getEpgProps,\n    getLayoutProps\n  } = useEpg({\n    channels: channelsData,\n    epg: epgData,\n    dayWidth: 7200,\n    sidebarWidth: 150,\n    itemHeight: 80,\n    isSidebar: true,\n    isTimeline: true,\n    isLine: true,\n    startDate: startDate,\n    isBaseTimeFormat: true,\n    theme,\n    globalStyles\n  });\n  const handleFetchResources = useCallback(async () => {\n    setIsLoading(true);\n    const channelList = await fetchAllChannels();\n    console.log(\"ðŸš€ ~ channelList\", channelList);\n    // const epgList = await fetchEpgList();\n    // if (!isEmpty(channelList) || !channelList.length) {\n    // \tconsole.log(\"ya hay\")\n    // \tconst formatedChannels = transformChannels(channelList)\n    // \tconst formatedEpg = transformEgp(channelList)\n    // \tconsole.log(\"ðŸš€ ~ file: useApp.js:53 ~ handleFetchResources ~ formatedChannels\", formatedChannels)\n    // \tsetChannels(formatedChannels)\n    // \tsetEpg(formatedEpg);\n    setIsLoading(false);\n    // }\n  }, []);\n  // console.log(\"ðŸš€ ~ file: useApp.js:49 ~ handleFetchResources ~ channels\", channels)\n\n  const callData = async () => {\n    const channelList = await fetchAllChannels();\n    setChannelsList(channelList);\n  };\n  // useEffect(() => {\n  // \tdispatch(fetchAllChannels())\n  // }, [dispatch]);\n  useEffect(() => {\n    handleFetchResources();\n  }, [handleFetchResources]);\n  useEffect(() => {\n    callData();\n  }, []);\n  console.log(\"ðŸš€ ~ file: useApp.js:66 ~ useEffect ~ channelsList\", channelsList);\n\n  // useEffect(() => {\n  // \tsetIsLoading(true);\n\n  // \t// const epgList = await fetchEpgList();\n  // \t// if (!isEmpty(channelList) || !channelList.length) {\n  // \t\tconsole.log(\"ya hay\", channelsList)\n  // \t\tconst formatedChannels = transformChannels(channelsList)\n  // \t\tconst formatedEpg = transformEgp(channelsList)\n  // \t\tconsole.log(\"ðŸš€ ~ file: useApp.js:53 ~ handleFetchResources ~ formatedChannels\", formatedChannels)\n  // \t\tsetChannels(formatedChannels)\n  // \t\tsetEpg(formatedEpg);\n  // \t\tsetIsLoading(false);\n  // \t// }\n  // }, [channelsList]);\n\n  return {\n    getEpgProps,\n    getLayoutProps,\n    isLoading\n  };\n}\n_s(useApp, \"aoseIVwTf8X22QNpXHNAxLrNm/g=\", false, function () {\n  return [useEpg];\n});","map":{"version":3,"names":["useState","useMemo","useCallback","useEffect","fetchAllChannels","transformChannels","transformEgp","roundMinutes","isEmpty","useEpg","theme","globalStyles","useApp","channelsList","setChannelsList","channels","setChannels","epg","setEpg","isLoading","setIsLoading","date","Date","startDate","channelsData","epgData","getEpgProps","getLayoutProps","dayWidth","sidebarWidth","itemHeight","isSidebar","isTimeline","isLine","isBaseTimeFormat","handleFetchResources","channelList","console","log","callData"],"sources":["/Users/anabarbosa/Code/Tests/react-redux-monkey/src/useApp.js"],"sourcesContent":["import { useState, useMemo, useCallback, useEffect } from \"react\";\n// import { useDispatch, useSelector } from 'react-redux';\nimport { fetchAllChannels, transformChannels, transformEgp, roundMinutes, isEmpty } from \"./helpers\";\nimport { useEpg } from \"planby\";\nimport { theme } from \"./helpers/theme\";\n\nconst globalStyles = `\n\t.planby {\n\t\tfont-family: \"Poppins\" sans-serif;\n\t}\n`;\n\nexport function useApp() {\n\t// const dispatch = useDispatch();\n\n\t// const { list: channelsList } = useSelector(state => state.channels);\n\t// const { list: epgList } = useSelector(state => state.epg);\n\t\n\tconst [channelsList, setChannelsList] = useState([]);\n\tconst [channels, setChannels] = useState([]);\n\tconst [epg, setEpg] = useState([]);\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst date = new Date()\n\tconst startDate = roundMinutes(date);\t\n\n\tconst channelsData = useMemo(() => channels, [channels]);\n\tconst epgData = useMemo(() => epg, [epg]);\n\n\tconst { getEpgProps, getLayoutProps } = useEpg({\n\t\tchannels: channelsData,\n\t\tepg: epgData,\n\t\tdayWidth: 7200,\n\t\tsidebarWidth: 150,\n\t\titemHeight: 80,\n\t\tisSidebar: true,\n\t\tisTimeline: true,\n\t\tisLine: true,\n\t\tstartDate: startDate,\n\t\tisBaseTimeFormat: true,\n\t\ttheme,\n\t\tglobalStyles\n\t});\n\n\tconst handleFetchResources = useCallback(async () => {\n\t\tsetIsLoading(true);\n\t\tconst channelList = await fetchAllChannels();\n\t\tconsole.log(\"ðŸš€ ~ channelList\", channelList)\n\t\t// const epgList = await fetchEpgList();\n\t\t// if (!isEmpty(channelList) || !channelList.length) {\n\t\t// \tconsole.log(\"ya hay\")\n\t\t// \tconst formatedChannels = transformChannels(channelList)\n\t\t// \tconst formatedEpg = transformEgp(channelList)\n\t\t// \tconsole.log(\"ðŸš€ ~ file: useApp.js:53 ~ handleFetchResources ~ formatedChannels\", formatedChannels)\n\t\t// \tsetChannels(formatedChannels)\n\t\t// \tsetEpg(formatedEpg);\n\t\tsetIsLoading(false);\n\t\t// }\n\t}, []);\n\t// console.log(\"ðŸš€ ~ file: useApp.js:49 ~ handleFetchResources ~ channels\", channels)\n\n\tconst callData = async () => {\n\t\tconst channelList = await fetchAllChannels();\n\t\tsetChannelsList(channelList);\n\t}\n\t// useEffect(() => {\n\t// \tdispatch(fetchAllChannels())\n\t// }, [dispatch]);\n\tuseEffect(() => {\n\t\thandleFetchResources()\n\t}, [handleFetchResources]);\n\n\tuseEffect(() => {\n\t\tcallData()\n  \t}, []);\n\tconsole.log(\"ðŸš€ ~ file: useApp.js:66 ~ useEffect ~ channelsList\", channelsList)\n\n\t// useEffect(() => {\n\t// \tsetIsLoading(true);\n\t\t\n\t// \t// const epgList = await fetchEpgList();\n\t// \t// if (!isEmpty(channelList) || !channelList.length) {\n\t// \t\tconsole.log(\"ya hay\", channelsList)\n\t// \t\tconst formatedChannels = transformChannels(channelsList)\n\t// \t\tconst formatedEpg = transformEgp(channelsList)\n\t// \t\tconsole.log(\"ðŸš€ ~ file: useApp.js:53 ~ handleFetchResources ~ formatedChannels\", formatedChannels)\n\t// \t\tsetChannels(formatedChannels)\n\t// \t\tsetEpg(formatedEpg);\n\t// \t\tsetIsLoading(false);\n\t// \t// }\n\t// }, [channelsList]);\n\n\treturn { getEpgProps, getLayoutProps, isLoading };\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,OAAO,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AACjE;AACA,SAASC,gBAAgB,EAAEC,iBAAiB,EAAEC,YAAY,EAAEC,YAAY,EAAEC,OAAO,QAAQ,WAAW;AACpG,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,KAAK,QAAQ,iBAAiB;AAEvC,MAAMC,YAAY,GAAI;AACtB;AACA;AACA;AACA,CAAC;AAED,OAAO,SAASC,MAAM,GAAG;EAAA;EACxB;;EAEA;EACA;;EAEA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACiB,GAAG,EAAEC,MAAM,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMqB,IAAI,GAAG,IAAIC,IAAI,EAAE;EACvB,MAAMC,SAAS,GAAGhB,YAAY,CAACc,IAAI,CAAC;EAEpC,MAAMG,YAAY,GAAGvB,OAAO,CAAC,MAAMc,QAAQ,EAAE,CAACA,QAAQ,CAAC,CAAC;EACxD,MAAMU,OAAO,GAAGxB,OAAO,CAAC,MAAMgB,GAAG,EAAE,CAACA,GAAG,CAAC,CAAC;EAEzC,MAAM;IAAES,WAAW;IAAEC;EAAe,CAAC,GAAGlB,MAAM,CAAC;IAC9CM,QAAQ,EAAES,YAAY;IACtBP,GAAG,EAAEQ,OAAO;IACZG,QAAQ,EAAE,IAAI;IACdC,YAAY,EAAE,GAAG;IACjBC,UAAU,EAAE,EAAE;IACdC,SAAS,EAAE,IAAI;IACfC,UAAU,EAAE,IAAI;IAChBC,MAAM,EAAE,IAAI;IACZV,SAAS,EAAEA,SAAS;IACpBW,gBAAgB,EAAE,IAAI;IACtBxB,KAAK;IACLC;EACD,CAAC,CAAC;EAEF,MAAMwB,oBAAoB,GAAGjC,WAAW,CAAC,YAAY;IACpDkB,YAAY,CAAC,IAAI,CAAC;IAClB,MAAMgB,WAAW,GAAG,MAAMhC,gBAAgB,EAAE;IAC5CiC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,WAAW,CAAC;IAC5C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAhB,YAAY,CAAC,KAAK,CAAC;IACnB;EACD,CAAC,EAAE,EAAE,CAAC;EACN;;EAEA,MAAMmB,QAAQ,GAAG,YAAY;IAC5B,MAAMH,WAAW,GAAG,MAAMhC,gBAAgB,EAAE;IAC5CU,eAAe,CAACsB,WAAW,CAAC;EAC7B,CAAC;EACD;EACA;EACA;EACAjC,SAAS,CAAC,MAAM;IACfgC,oBAAoB,EAAE;EACvB,CAAC,EAAE,CAACA,oBAAoB,CAAC,CAAC;EAE1BhC,SAAS,CAAC,MAAM;IACfoC,QAAQ,EAAE;EACT,CAAC,EAAE,EAAE,CAAC;EACRF,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAEzB,YAAY,CAAC;;EAE/E;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,OAAO;IAAEa,WAAW;IAAEC,cAAc;IAAER;EAAU,CAAC;AAClD;AAAC,GAjFeP,MAAM;EAAA,QAiBmBH,MAAM;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}