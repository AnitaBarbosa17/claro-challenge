{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useMemo, useCallback, useEffect } from \"react\";\n// import { useDispatch, useSelector } from 'react-redux';\nimport { fetchAllChannels, transformChannels, transformEgp, roundMinutes, isEmpty } from \"./helpers\";\nimport { useEpg } from \"planby\";\nimport { theme } from \"./helpers/theme\";\nconst globalStyles = `\n\t.planby {\n\t\tfont-family: \"Poppins\" sans-serif;\n\t}\n`;\nexport function useApp() {\n  _s();\n  // const dispatch = useDispatch();\n\n  // const { list: channelsList } = useSelector(state => state.channels);\n  // const { list: epgList } = useSelector(state => state.epg);\n\n  const [channelsList, setChannelsList] = useState([]);\n  const [channels, setChannels] = useState([]);\n  const [epg, setEpg] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const date = new Date();\n  const startDate = roundMinutes(date);\n  const channelsData = useMemo(() => channels, [channels]);\n  const epgData = useMemo(() => epg, [epg]);\n  const {\n    getEpgProps,\n    getLayoutProps\n  } = useEpg({\n    channels: channelsData,\n    epg: epgData,\n    dayWidth: 7200,\n    sidebarWidth: 150,\n    itemHeight: 80,\n    isSidebar: true,\n    isTimeline: true,\n    isLine: true,\n    startDate: startDate,\n    isBaseTimeFormat: true,\n    theme,\n    globalStyles\n  });\n\n  // const handleFetchResources = useCallback(async () => {\n  // \tsetIsLoading(true);\n  // \tconst channelList = await fetchAllChannels();\n  // \t// const epgList = await fetchEpgList();\n  // \tif (!isEmpty(channelList) || !channelList.length) {\n  // \t\tconsole.log(\"ya hay\")\n  // \t\tconst formatedChannels = transformChannels(channelList)\n  // \t\tconst formatedEpg = transformEgp(channelList)\n  // \t\tconsole.log(\"ðŸš€ ~ file: useApp.js:53 ~ handleFetchResources ~ formatedChannels\", formatedChannels)\n  // \t\tsetChannels(formatedChannels)\n  // \t\tsetEpg(formatedEpg);\n  // \t\tsetIsLoading(false);\n  // \t}\n  // }, [fetchAllChannels]);\n  // console.log(\"ðŸš€ ~ file: useApp.js:49 ~ handleFetchResources ~ channels\", channels)\n  // useEffect(() => {\n  // \tdispatch(fetchAllChannels())\n  // }, [dispatch]);\n\n  useEffect(() => {\n    const channelList = fetchAllChannels();\n    console.log(\"ðŸš€ ~ file: useApp.js:66 ~ useEffect ~ channelList\", channelList);\n    setChannelsList(channelList);\n  }, []);\n  useEffect(() => {\n    setIsLoading(true);\n\n    // const epgList = await fetchEpgList();\n    // if (!isEmpty(channelList) || !channelList.length) {\n    console.log(\"ya hay\", channelsList);\n    const formatedChannels = transformChannels(channelsList);\n    const formatedEpg = transformEgp(channelsList);\n    console.log(\"ðŸš€ ~ file: useApp.js:53 ~ handleFetchResources ~ formatedChannels\", formatedChannels);\n    setChannels(formatedChannels);\n    setEpg(formatedEpg);\n    setIsLoading(false);\n    // }\n  }, [channelsList]);\n  return {\n    getEpgProps,\n    getLayoutProps,\n    isLoading\n  };\n}\n_s(useApp, \"iut51IK9Qco3OJmWhvOhBRX+wEs=\", false, function () {\n  return [useEpg];\n});","map":{"version":3,"names":["useState","useMemo","useCallback","useEffect","fetchAllChannels","transformChannels","transformEgp","roundMinutes","isEmpty","useEpg","theme","globalStyles","useApp","channelsList","setChannelsList","channels","setChannels","epg","setEpg","isLoading","setIsLoading","date","Date","startDate","channelsData","epgData","getEpgProps","getLayoutProps","dayWidth","sidebarWidth","itemHeight","isSidebar","isTimeline","isLine","isBaseTimeFormat","channelList","console","log","formatedChannels","formatedEpg"],"sources":["/Users/anabarbosa/Code/Tests/react-redux-monkey/src/useApp.js"],"sourcesContent":["import { useState, useMemo, useCallback, useEffect } from \"react\";\n// import { useDispatch, useSelector } from 'react-redux';\nimport { fetchAllChannels, transformChannels, transformEgp, roundMinutes, isEmpty } from \"./helpers\";\nimport { useEpg } from \"planby\";\nimport { theme } from \"./helpers/theme\";\n\nconst globalStyles = `\n\t.planby {\n\t\tfont-family: \"Poppins\" sans-serif;\n\t}\n`;\n\nexport function useApp() {\n\t// const dispatch = useDispatch();\n\n\t// const { list: channelsList } = useSelector(state => state.channels);\n\t// const { list: epgList } = useSelector(state => state.epg);\n\t\n\tconst [channelsList, setChannelsList] = useState([]);\n\tconst [channels, setChannels] = useState([]);\n\tconst [epg, setEpg] = useState([]);\n\tconst [isLoading, setIsLoading] = useState(false);\n\n\tconst date = new Date()\n\tconst startDate = roundMinutes(date);\t\n\n\tconst channelsData = useMemo(() => channels, [channels]);\n\tconst epgData = useMemo(() => epg, [epg]);\n\n\tconst { getEpgProps, getLayoutProps } = useEpg({\n\t\tchannels: channelsData,\n\t\tepg: epgData,\n\t\tdayWidth: 7200,\n\t\tsidebarWidth: 150,\n\t\titemHeight: 80,\n\t\tisSidebar: true,\n\t\tisTimeline: true,\n\t\tisLine: true,\n\t\tstartDate: startDate,\n\t\tisBaseTimeFormat: true,\n\t\ttheme,\n\t\tglobalStyles\n\t});\n\n\t// const handleFetchResources = useCallback(async () => {\n\t// \tsetIsLoading(true);\n\t// \tconst channelList = await fetchAllChannels();\n\t// \t// const epgList = await fetchEpgList();\n\t// \tif (!isEmpty(channelList) || !channelList.length) {\n\t// \t\tconsole.log(\"ya hay\")\n\t// \t\tconst formatedChannels = transformChannels(channelList)\n\t// \t\tconst formatedEpg = transformEgp(channelList)\n\t// \t\tconsole.log(\"ðŸš€ ~ file: useApp.js:53 ~ handleFetchResources ~ formatedChannels\", formatedChannels)\n\t// \t\tsetChannels(formatedChannels)\n\t// \t\tsetEpg(formatedEpg);\n\t// \t\tsetIsLoading(false);\n\t// \t}\n\t// }, [fetchAllChannels]);\n\t// console.log(\"ðŸš€ ~ file: useApp.js:49 ~ handleFetchResources ~ channels\", channels)\n\t// useEffect(() => {\n\t// \tdispatch(fetchAllChannels())\n\t// }, [dispatch]);\n\n\tuseEffect(() => {\n\t\tconst channelList = fetchAllChannels();\n\t\tconsole.log(\"ðŸš€ ~ file: useApp.js:66 ~ useEffect ~ channelList\", channelList)\n\t\tsetChannelsList(channelList);\n  \t}, []);\n\n\tuseEffect(() => {\n\t\tsetIsLoading(true);\n\t\t\n\t\t// const epgList = await fetchEpgList();\n\t\t// if (!isEmpty(channelList) || !channelList.length) {\n\t\t\tconsole.log(\"ya hay\", channelsList)\n\t\t\tconst formatedChannels = transformChannels(channelsList)\n\t\t\tconst formatedEpg = transformEgp(channelsList)\n\t\t\tconsole.log(\"ðŸš€ ~ file: useApp.js:53 ~ handleFetchResources ~ formatedChannels\", formatedChannels)\n\t\t\tsetChannels(formatedChannels)\n\t\t\tsetEpg(formatedEpg);\n\t\t\tsetIsLoading(false);\n\t\t// }\n\t}, [channelsList]);\n\n\treturn { getEpgProps, getLayoutProps, isLoading };\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,OAAO,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AACjE;AACA,SAASC,gBAAgB,EAAEC,iBAAiB,EAAEC,YAAY,EAAEC,YAAY,EAAEC,OAAO,QAAQ,WAAW;AACpG,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,KAAK,QAAQ,iBAAiB;AAEvC,MAAMC,YAAY,GAAI;AACtB;AACA;AACA;AACA,CAAC;AAED,OAAO,SAASC,MAAM,GAAG;EAAA;EACxB;;EAEA;EACA;;EAEA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACiB,GAAG,EAAEC,MAAM,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMqB,IAAI,GAAG,IAAIC,IAAI,EAAE;EACvB,MAAMC,SAAS,GAAGhB,YAAY,CAACc,IAAI,CAAC;EAEpC,MAAMG,YAAY,GAAGvB,OAAO,CAAC,MAAMc,QAAQ,EAAE,CAACA,QAAQ,CAAC,CAAC;EACxD,MAAMU,OAAO,GAAGxB,OAAO,CAAC,MAAMgB,GAAG,EAAE,CAACA,GAAG,CAAC,CAAC;EAEzC,MAAM;IAAES,WAAW;IAAEC;EAAe,CAAC,GAAGlB,MAAM,CAAC;IAC9CM,QAAQ,EAAES,YAAY;IACtBP,GAAG,EAAEQ,OAAO;IACZG,QAAQ,EAAE,IAAI;IACdC,YAAY,EAAE,GAAG;IACjBC,UAAU,EAAE,EAAE;IACdC,SAAS,EAAE,IAAI;IACfC,UAAU,EAAE,IAAI;IAChBC,MAAM,EAAE,IAAI;IACZV,SAAS,EAAEA,SAAS;IACpBW,gBAAgB,EAAE,IAAI;IACtBxB,KAAK;IACLC;EACD,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAR,SAAS,CAAC,MAAM;IACf,MAAMgC,WAAW,GAAG/B,gBAAgB,EAAE;IACtCgC,OAAO,CAACC,GAAG,CAAC,mDAAmD,EAAEF,WAAW,CAAC;IAC7ErB,eAAe,CAACqB,WAAW,CAAC;EAC3B,CAAC,EAAE,EAAE,CAAC;EAERhC,SAAS,CAAC,MAAM;IACfiB,YAAY,CAAC,IAAI,CAAC;;IAElB;IACA;IACCgB,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAExB,YAAY,CAAC;IACnC,MAAMyB,gBAAgB,GAAGjC,iBAAiB,CAACQ,YAAY,CAAC;IACxD,MAAM0B,WAAW,GAAGjC,YAAY,CAACO,YAAY,CAAC;IAC9CuB,OAAO,CAACC,GAAG,CAAC,mEAAmE,EAAEC,gBAAgB,CAAC;IAClGtB,WAAW,CAACsB,gBAAgB,CAAC;IAC7BpB,MAAM,CAACqB,WAAW,CAAC;IACnBnB,YAAY,CAAC,KAAK,CAAC;IACpB;EACD,CAAC,EAAE,CAACP,YAAY,CAAC,CAAC;EAElB,OAAO;IAAEa,WAAW;IAAEC,cAAc;IAAER;EAAU,CAAC;AAClD;AAAC,GAzEeP,MAAM;EAAA,QAiBmBH,MAAM;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}