{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from \"react\";\n\n// import { fetchChannels, fetchEpg } from \"./helpers\";\nimport { fetchAllChannels } from \"./helpers\";\nimport { useEpg } from \"planby\";\n\n// Import theme\nimport { theme } from \"./helpers/theme\";\nimport { useDispatch, useSelector } from 'react-redux';\nexport function useApp() {\n  _s();\n  const dispatch = useDispatch();\n  const {\n    list: channelsList\n  } = useSelector(state => state.channels);\n  // const [channels, setChannels] = React.useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const channelsData = React.useMemo(() => channelsList, [channelsList]);\n  console.log(\"ðŸš€ ~ file: useApp.js:22 ~ useApp ~ channelsData\", channelsData);\n\n  // const handleFetchResources = useCallback(async () => {\n  // \tsetIsLoading(true)\n  // \tsetChannels(channelsList)\n  // \tsetIsLoading(false)\n  // })\n\n  // useEffect(() => {\n\n  // \thandleFetchResources()\n  // }, [handleFetchResources])\n\n  useEffect(() => {\n    setIsLoading(true);\n    dispatch(fetchAllChannels());\n    setIsLoading(false);\n  }, []);\n\n  //   const [channels, setChannels] = React.useState([]);\n  //   const [epg, setEpg] = React.useState([]);\n  //   const [isLoading, setIsLoading] = React.useState(false);\n\n  //   const channelsData = React.useMemo(() => channels, [channels]);\n  //   const epgData = React.useMemo(() => epg, [epg]);\n\n  //   const { getEpgProps, getLayoutProps } = useEpg({\n  // \tchannels: channelsData,\n  // \tepg: epgData,\n  // \tdayWidth: 7200,\n  // \tsidebarWidth: 100,\n  // \titemHeight: 80,\n  // \tisSidebar: true,\n  // \tisTimeline: true,\n  // \tisLine: true,\n  // \tstartDate: \"2022-10-18T00:00:00\",\n  // \tendDate: \"2022-10-18T24:00:00\",\n  // \tisBaseTimeFormat: true,\n  // \ttheme\n  //   });\n\n  //   const handleFetchResources = React.useCallback(async () => {\n  // \tsetIsLoading(true);\n  // \t// const epg = await fetchEpg();\n  // \tconst channels = fetchAllChannels();\n  // \tsetEpg(epg);\n  // \tsetChannels(channels);\n  // \tsetIsLoading(false);\n  //   }, []);\n\n  //   React.useEffect(() => {\n  // \thandleFetchResources();\n  //   }, [handleFetchResources]);\n\n  //   return { getEpgProps, getLayoutProps, isLoading };\n  return {};\n}\n_s(useApp, \"LmG1gTj7MfD6x6XfXK+eLt+0gK0=\", false, function () {\n  return [useDispatch, useSelector];\n});","map":{"version":3,"names":["React","useCallback","useEffect","useState","fetchAllChannels","useEpg","theme","useDispatch","useSelector","useApp","dispatch","list","channelsList","state","channels","isLoading","setIsLoading","channelsData","useMemo","console","log"],"sources":["/Users/anabarbosa/Code/Tests/react-redux-monkey/src/useApp.js"],"sourcesContent":["import React, {useCallback, useEffect, useState} from \"react\";\n\n// import { fetchChannels, fetchEpg } from \"./helpers\";\nimport { fetchAllChannels } from \"./helpers\";\n\nimport { useEpg } from \"planby\";\n\n// Import theme\nimport { theme } from \"./helpers/theme\";\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport function useApp() {\n\t\n\tconst dispatch = useDispatch();\n\n\tconst { list: channelsList } = useSelector(state => state.channels);\n\t// const [channels, setChannels] = React.useState([]);\n\tconst [isLoading, setIsLoading] = useState(false);\n\t\n\tconst channelsData = React.useMemo(() => channelsList, [channelsList]);\n\tconsole.log(\"ðŸš€ ~ file: useApp.js:22 ~ useApp ~ channelsData\", channelsData)\n\t\n\t// const handleFetchResources = useCallback(async () => {\n\t// \tsetIsLoading(true)\n\t// \tsetChannels(channelsList)\n\t// \tsetIsLoading(false)\n\t// })\n\n\t// useEffect(() => {\n\n\t// \thandleFetchResources()\n\t// }, [handleFetchResources])\n\t\n\tuseEffect(() => {\n\t\tsetIsLoading(true)\n\t\tdispatch(fetchAllChannels())\n\t\tsetIsLoading(false)\n\t}, [])\n\n\n//   const [channels, setChannels] = React.useState([]);\n//   const [epg, setEpg] = React.useState([]);\n//   const [isLoading, setIsLoading] = React.useState(false);\n\n//   const channelsData = React.useMemo(() => channels, [channels]);\n//   const epgData = React.useMemo(() => epg, [epg]);\n\n//   const { getEpgProps, getLayoutProps } = useEpg({\n// \tchannels: channelsData,\n// \tepg: epgData,\n// \tdayWidth: 7200,\n// \tsidebarWidth: 100,\n// \titemHeight: 80,\n// \tisSidebar: true,\n// \tisTimeline: true,\n// \tisLine: true,\n// \tstartDate: \"2022-10-18T00:00:00\",\n// \tendDate: \"2022-10-18T24:00:00\",\n// \tisBaseTimeFormat: true,\n// \ttheme\n//   });\n\n//   const handleFetchResources = React.useCallback(async () => {\n// \tsetIsLoading(true);\n// \t// const epg = await fetchEpg();\n// \tconst channels = fetchAllChannels();\n// \tsetEpg(epg);\n// \tsetChannels(channels);\n// \tsetIsLoading(false);\n//   }, []);\n\n//   React.useEffect(() => {\n// \thandleFetchResources();\n//   }, [handleFetchResources]);\n\n//   return { getEpgProps, getLayoutProps, isLoading };\n  \treturn {  };\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAO,OAAO;;AAE7D;AACA,SAASC,gBAAgB,QAAQ,WAAW;AAE5C,SAASC,MAAM,QAAQ,QAAQ;;AAE/B;AACA,SAASC,KAAK,QAAQ,iBAAiB;AAEvC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAEtD,OAAO,SAASC,MAAM,GAAG;EAAA;EAExB,MAAMC,QAAQ,GAAGH,WAAW,EAAE;EAE9B,MAAM;IAAEI,IAAI,EAAEC;EAAa,CAAC,GAAGJ,WAAW,CAACK,KAAK,IAAIA,KAAK,CAACC,QAAQ,CAAC;EACnE;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMc,YAAY,GAAGjB,KAAK,CAACkB,OAAO,CAAC,MAAMN,YAAY,EAAE,CAACA,YAAY,CAAC,CAAC;EACtEO,OAAO,CAACC,GAAG,CAAC,iDAAiD,EAAEH,YAAY,CAAC;;EAE5E;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAEAf,SAAS,CAAC,MAAM;IACfc,YAAY,CAAC,IAAI,CAAC;IAClBN,QAAQ,CAACN,gBAAgB,EAAE,CAAC;IAC5BY,YAAY,CAAC,KAAK,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;;EAGP;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACG,OAAO,CAAG,CAAC;AACd;AAAC,GAlEeP,MAAM;EAAA,QAEJF,WAAW,EAEGC,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}