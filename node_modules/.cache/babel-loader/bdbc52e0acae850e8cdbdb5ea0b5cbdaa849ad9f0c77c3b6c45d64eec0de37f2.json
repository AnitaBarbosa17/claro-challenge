{"ast":null,"code":"import axios from \"axios\";\nimport { setChannelList } from '../store/slices/channels';\nimport { channels } from \"./channels\";\nimport { epg } from \"./epg\";\n\n// const formatDate = (date) => {\n//     console.log(\"ðŸš€ ~ file: common.js:8 ~ formatDate ~ date\", date)\n//     return date.toISOString().slice(-24).replace(/\\D/g,'').slice(0, 14);\n// }\nconst toISOStringWithTimezone = date => {\n  const tzOffset = -date.getTimezoneOffset();\n  const diff = tzOffset >= 0 ? '+' : '-';\n  const pad = n => `${Math.floor(Math.abs(n))}`.padStart(2, '0');\n  return date.getFullYear() + '-' + pad(date.getMonth() + 1) + '-' + pad(date.getDate()) + 'T' + pad(date.getHours()) + ':' + pad(date.getMinutes()) + ':' + pad(date.getSeconds()) + diff + pad(tzOffset / 60) + ':' + pad(tzOffset % 60);\n};\nconst date = new Date();\nconst dateSince = toISOStringWithTimezone(date);\nconsole.log(\"ðŸš€ ~ file: common.js:26 ~ dateSince\", dateSince);\nconst dateTill = toISOStringWithTimezone(new Date(date.setDate(date.getDate() + 1)));\nconsole.log(\"ðŸš€ ~ file: common.js:28 ~ dateTill\", dateTill);\nconst API_URL = `https://mfwkweb-api.clarovideo.net/services/epg/channel?device_id=web&device_category=web&device_model=web&device_type=web&device_so=Chrome&format=json&device_manufacturer=generic&authpn=webclient&authpt=tfg1h3j4k6fd7&api_version=v5.93&region=guatemala&HKS=web61144bb49d549&user_id=54343080&date_from=${dateSince}&date_to=${dateTill}&quantity=200`;\nexport const fetchChannels = async () => new Promise(res => setTimeout(() => res(channels), 400));\nexport const fetchEpg = async () => new Promise(res => setTimeout(() => res(epg), 500));\nexport const fetchAllChannels = () => async dispatch => {\n  await axios.get(API_URL).then(res => {\n    dispatch(setChannelList(res.data.response.channels));\n  }).catch(err => console.log(err));\n};","map":{"version":3,"names":["axios","setChannelList","channels","epg","toISOStringWithTimezone","date","tzOffset","getTimezoneOffset","diff","pad","n","Math","floor","abs","padStart","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","Date","dateSince","console","log","dateTill","setDate","API_URL","fetchChannels","Promise","res","setTimeout","fetchEpg","fetchAllChannels","dispatch","get","then","data","response","catch","err"],"sources":["/Users/anabarbosa/Code/Tests/react-redux-monkey/src/helpers/common.js"],"sourcesContent":["import axios from \"axios\";\nimport { setChannelList } from '../store/slices/channels';\nimport { channels } from \"./channels\";\nimport { epg } from \"./epg\";\n\n// const formatDate = (date) => {\n//     console.log(\"ðŸš€ ~ file: common.js:8 ~ formatDate ~ date\", date)\n//     return date.toISOString().slice(-24).replace(/\\D/g,'').slice(0, 14);\n// }\nconst toISOStringWithTimezone = date => {\n    const tzOffset = -date.getTimezoneOffset();\n    const diff = tzOffset >= 0 ? '+' : '-';\n    const pad = n => `${Math.floor(Math.abs(n))}`.padStart(2, '0');\n    return date.getFullYear() +\n        '-' + pad(date.getMonth() + 1) +\n        '-' + pad(date.getDate()) +\n        'T' + pad(date.getHours()) +\n        ':' + pad(date.getMinutes()) +\n        ':' + pad(date.getSeconds()) +\n        diff + pad(tzOffset / 60) +\n        ':' + pad(tzOffset % 60);\n};\n\nconst date = new Date();\nconst dateSince = toISOStringWithTimezone(date)\nconsole.log(\"ðŸš€ ~ file: common.js:26 ~ dateSince\", dateSince)\nconst dateTill = toISOStringWithTimezone(new Date(date.setDate(date.getDate() + 1)));\nconsole.log(\"ðŸš€ ~ file: common.js:28 ~ dateTill\", dateTill)\n\nconst API_URL = `https://mfwkweb-api.clarovideo.net/services/epg/channel?device_id=web&device_category=web&device_model=web&device_type=web&device_so=Chrome&format=json&device_manufacturer=generic&authpn=webclient&authpt=tfg1h3j4k6fd7&api_version=v5.93&region=guatemala&HKS=web61144bb49d549&user_id=54343080&date_from=${dateSince}&date_to=${dateTill}&quantity=200`;\n\n\nexport const fetchChannels = async () =>\n    new Promise((res) => setTimeout(() => res(channels), 400));\n\nexport const fetchEpg = async () =>\n    new Promise((res) => setTimeout(() => res(epg), 500));\n\nexport const fetchAllChannels = () => async (dispatch) => {\n    await axios.get(API_URL)\n        .then((res) => {\n            dispatch(setChannelList(res.data.response.channels));\n        })\n        .catch((err) => console.log(err))\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,QAAQ,0BAA0B;AACzD,SAASC,QAAQ,QAAQ,YAAY;AACrC,SAASC,GAAG,QAAQ,OAAO;;AAE3B;AACA;AACA;AACA;AACA,MAAMC,uBAAuB,GAAGC,IAAI,IAAI;EACpC,MAAMC,QAAQ,GAAG,CAACD,IAAI,CAACE,iBAAiB,EAAE;EAC1C,MAAMC,IAAI,GAAGF,QAAQ,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG;EACtC,MAAMG,GAAG,GAAGC,CAAC,IAAK,GAAEC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACH,CAAC,CAAC,CAAE,EAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC9D,OAAOT,IAAI,CAACU,WAAW,EAAE,GACrB,GAAG,GAAGN,GAAG,CAACJ,IAAI,CAACW,QAAQ,EAAE,GAAG,CAAC,CAAC,GAC9B,GAAG,GAAGP,GAAG,CAACJ,IAAI,CAACY,OAAO,EAAE,CAAC,GACzB,GAAG,GAAGR,GAAG,CAACJ,IAAI,CAACa,QAAQ,EAAE,CAAC,GAC1B,GAAG,GAAGT,GAAG,CAACJ,IAAI,CAACc,UAAU,EAAE,CAAC,GAC5B,GAAG,GAAGV,GAAG,CAACJ,IAAI,CAACe,UAAU,EAAE,CAAC,GAC5BZ,IAAI,GAAGC,GAAG,CAACH,QAAQ,GAAG,EAAE,CAAC,GACzB,GAAG,GAAGG,GAAG,CAACH,QAAQ,GAAG,EAAE,CAAC;AAChC,CAAC;AAED,MAAMD,IAAI,GAAG,IAAIgB,IAAI,EAAE;AACvB,MAAMC,SAAS,GAAGlB,uBAAuB,CAACC,IAAI,CAAC;AAC/CkB,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEF,SAAS,CAAC;AAC7D,MAAMG,QAAQ,GAAGrB,uBAAuB,CAAC,IAAIiB,IAAI,CAAChB,IAAI,CAACqB,OAAO,CAACrB,IAAI,CAACY,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AACpFM,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEC,QAAQ,CAAC;AAE3D,MAAME,OAAO,GAAI,gTAA+SL,SAAU,YAAWG,QAAS,eAAc;AAG5W,OAAO,MAAMG,aAAa,GAAG,YACzB,IAAIC,OAAO,CAAEC,GAAG,IAAKC,UAAU,CAAC,MAAMD,GAAG,CAAC5B,QAAQ,CAAC,EAAE,GAAG,CAAC,CAAC;AAE9D,OAAO,MAAM8B,QAAQ,GAAG,YACpB,IAAIH,OAAO,CAAEC,GAAG,IAAKC,UAAU,CAAC,MAAMD,GAAG,CAAC3B,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;AAEzD,OAAO,MAAM8B,gBAAgB,GAAG,MAAM,MAAOC,QAAQ,IAAK;EACtD,MAAMlC,KAAK,CAACmC,GAAG,CAACR,OAAO,CAAC,CACnBS,IAAI,CAAEN,GAAG,IAAK;IACXI,QAAQ,CAACjC,cAAc,CAAC6B,GAAG,CAACO,IAAI,CAACC,QAAQ,CAACpC,QAAQ,CAAC,CAAC;EACxD,CAAC,CAAC,CACDqC,KAAK,CAAEC,GAAG,IAAKjB,OAAO,CAACC,GAAG,CAACgB,GAAG,CAAC,CAAC;AACzC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}